{"version":3,"sources":["HOC/withAuthRedirect.js","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusHooks.jsx","Components/Profile/ProfileInfo/ProfileDataForm.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Redux/profileSelector.js","Components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","getIsAuth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","Input","Element","TextArea","ProfileDataFormRedux","reduxForm","form","handleSubmit","profile","error","onSubmit","className","classesForm","formSummaryError","createField","required","type","Object","keys","contacts","map","key","classes","contact","ProfileData","isOwner","toEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactName","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","small","userPhoto","profilePhotoSmall","target","files","length","initialValues","formData","then","Post","item","alt","message","likes","maxLength10","maxLengthCreator","MyPosts","postDataHtml","posts","post","id","likesCount","postsBlock","AddNewPostFormRedux","values","addPost","text","PureComponent","Field","name","placeholder","component","validate","profilePage","Profile","MyPostsContainer","getProfile","getProfileStatus","ProfileContainer","userId","match","params","currentActiveUserId","history","push","obtainProfileDataThunkCreator","getProfileStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","updateProfileStatusThunkCreator","savePhotoThunkCreator","saveProfileThunkCreator","compose","getUserId","withRouter"],"mappings":"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","file":"static/js/3.ef2eb0b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {getIsAuth} from \"../Redux/authSelector\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: getIsAuth(state)\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2eRco\",\"profilePhotoSmall\":\"ProfileInfo_profilePhotoSmall__2aEsN\",\"contact\":\"ProfileInfo_contact__3HdTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__c7V0W\",\"posts\":\"MyPosts_posts__2vEWx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Gz73\"};","import React, {useEffect, useState} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n            setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (<div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deActivateEditMode} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusHooks;","import React from \"react\";\r\nimport {createField, Element} from \"../../Common/FormControls/formControls\";\r\nimport {required} from \"../../../Utils/Validators/validators\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport classesForm from \"../../Common/FormControls/formControls.module.css\"\r\n\r\nconst Input = Element(\"input\");\r\nconst TextArea = Element(\"textarea\");\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            { error && <div className={classesForm.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {createField(\"Full name\", \"fullName\", Input, [required])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField(null, \"lookingForAJob\", Input, [], {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField(\"Tell about your hard skills\", \"lookingForAJobDescription\", TextArea, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField(\"Tell about your soft skills\", \"aboutMe\", TextArea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return (\r\n                    <div key={key} className={classes.contact}>\r\n                        <b>{key}</b>: {createField(null, \"contacts.\" + key, Input, [])}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataFormRedux = reduxForm({form: 'editProfileForm'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormRedux;","import React, {useState} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\n//import ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusHooks from \"./ProfileStatusHooks\";\r\nimport userPhoto from '../../../Assets/Images/userPicDefault.png';\r\nimport ProfileDataFormRedux from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onProfilePhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then( () => {\r\n            setEditMode(false);\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos.small || userPhoto} className={classes.profilePhotoSmall}/>\r\n                {isOwner && <input type={\"file\"} onChange={onProfilePhotoSelected}/>}\r\n\r\n                {editMode ? <ProfileDataFormRedux initialValues={profile} onSubmit={onSubmit} profile={profile}/> :\r\n                    <ProfileData profile={profile} isOwner={isOwner} toEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n\r\n                <div>\r\n                    <ProfileStatusHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, toEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={toEditMode}>Edit</button>\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactName={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Contact = ({contactName, contactValue}) => {\r\n    return (\r\n        <div>\r\n            {contactValue && <div className={classes.contact}><b>{contactName}</b>: {contactValue}</div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src='https://cdn.pixabay.com/photo/2016/12/13/16/17/dancer-1904467_960_720.png' alt='userPic' />\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likes}</span> like(s)\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {PureComponent} from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Element} from \"../../Common/FormControls/formControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst TextArea = Element(\"textarea\");\r\n\r\nclass MyPosts extends PureComponent {\r\n    render() {\r\n        //console.log(\"MyPost render\");\r\n        let postDataHtml = this.props.posts.map((post) =>\r\n            <Post message={post.post} key={post.id} likes={post.likesCount}/>\r\n        );\r\n\r\n        const addPost = (values) => {\r\n            this.props.addPost(values.text)\r\n        };\r\n\r\n        return (\r\n            <div className={classes.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <AddNewPostFormRedux onSubmit={addPost}/>\r\n                <div className={classes.posts}>\r\n                    {postDataHtml}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"text\"} placeholder={\"What's new?\"} component={TextArea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddNewPostFormRedux = reduxForm({\r\n    form: \"addNewPostForm\"\r\n})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost} from \"../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps= (state) => {\r\n\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {addPost})(MyPosts);","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","export const getProfile = (state) => {\r\n    return state.profilePage.profile;\r\n};\r\n\r\nexport const getProfileStatus = (state) => {\r\n    return state.profilePage.status;\r\n};","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileStatusThunkCreator,\r\n    obtainProfileDataThunkCreator,\r\n    updateProfileStatusThunkCreator,\r\n    savePhotoThunkCreator,\r\n    saveProfileThunkCreator\r\n} from \"../../Redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getIsAuth, getUserId} from \"../../Redux/authSelector\";\r\nimport {getProfile, getProfileStatus} from \"../../Redux/profileSelector\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.currentActiveUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.obtainProfileDataThunkCreator(userId);\r\n        this.props.getProfileStatusThunkCreator(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //console.log('render PROFILE');\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateProfileStatusThunkCreator}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhotoThunkCreator} saveProfile={this.props.saveProfileThunkCreator}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    //console.log('mapStateToProps PROFILE');\r\n    return ({\r\n        profile: getProfile(state),\r\n        status: getProfileStatus(state),\r\n        currentActiveUserId: getUserId(state),\r\n        isAuth: getIsAuth(state)\r\n\r\n    });\r\n};\r\n\r\n\r\n/*export default compose(\r\n    connect(mapStateToProps, {\r\n        obtainProfileDataThunkCreator,\r\n        getProfileStatusThunkCreator,\r\n        updateProfileStatusThunkCreator\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);*/\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        obtainProfileDataThunkCreator,\r\n        getProfileStatusThunkCreator,\r\n        updateProfileStatusThunkCreator,\r\n        savePhotoThunkCreator,\r\n        saveProfileThunkCreator\r\n    }),\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}